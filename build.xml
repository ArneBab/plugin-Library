<?xml version="1.0"?>
<!-- ant build file for Freenet -->

<project name="plugins-Library" default="dist" basedir=".">
	<property name="freenet-cvs-snapshot.location" location="../fred/lib/freenet-cvs-snapshot.jar"/>
	<property name="freenet-ext.location" location="../fred/lib/freenet-ext.jar"/>
	<property name="svn.revision" value="@custom@"/>
	<property name="source-version" value="1.5"/>
	<property name="target-version" value="1.5"/>
	<property name="build" location="build/"/>
	<property name="build-test" location="build-test/"/>
	<property name="run-test" location="run-test/"/>
	<property name="tmp" location="tmp/"/>
	<property name="dist" location="dist/"/>
	<property name="javadoc" location="javadoc/"/>
	<property name="junit.location" value="/usr/share/java/junit.jar"/>
	<property name="packagebase" value="plugins.Library" />

	<available file="src/plugins/Library/Version.java" property="version.present"/>
	<available file="${junit.location}" property="junit.present"/>

	<path id="lib.path">
		<pathelement location="${freenet-ext.location}"/>
		<pathelement location="${freenet-cvs-snapshot.location}"/>
		<fileset dir="lib/">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<!-- ================================================== -->
	<target name="mkdir">
		<mkdir dir="${build}"/>
		<mkdir dir="${build-test}"/>
		<mkdir dir="${run-test}"/>
		<mkdir dir="${dist}"/>
		<echo message="Using ${freenet-cvs-snapshot.location} as freenet-cvs-snapshot.jar"/>
		<echo message="Using ${freenet-ext.location} as freenet-ext.jar"/>
	</target>

	<target name="setver" if="version.present">
		<!-- Update the Version.java file -->
		<replace file="src/plugins/Library/Version.java">
			<replacefilter token="@custom@" value="${svn.revision}"/>
		</replace>
	</target>

	<target name="build-dep">
		<mkdir dir="lib/"/>
		<mkdir dir="${tmp}"/>
		<ant target="SnakeYAML-get"/>
		<ant target="JGraphT-get"/>
		<!--<ant target="KeyExplorer-get"/>-->
		<delete dir="${tmp}"/>
	</target>

	<property name="SnakeYAML.mirror" value="http://snakeyaml.googlecode.com/files/SnakeYAML-all-1.3.zip" />
	<property name="SnakeYAML.md5" value="c7cc57854c70a39533877f475ca1954d" />
	<property name="SnakeYAML.sha" value="10996d5ed81185bd87a558531397e53aebe06594" />
	<available property="SnakeYAML.exist" classname="org.yaml.snakeyaml.Yaml" classpathref="lib.path"/>
	<target name="SnakeYAML-get" unless="SnakeYAML.exist">
		<get verbose="true" src="${SnakeYAML.mirror}" dest="${tmp}/SnakeYAML.zip" />
		<checksum file="${tmp}/SnakeYAML.zip" algorithm="MD5" property="${SnakeYAML.md5}" verifyProperty="SnakeYAMLMD5ok" />
		<checksum file="${tmp}/SnakeYAML.zip" algorithm="SHA" property="${SnakeYAML.sha}" verifyProperty="SnakeYAMLSHAok" />
		<fail message="SnakeYAML.zip checksum mismatch">
			<condition>
				<or>
					<equals arg1="${SnakeYAMLMD5ok}" arg2="false" />
					<equals arg1="${SnakeYAMLSHAok}" arg2="false" />
				</or>
			</condition>
		</fail>
		<unzip src="${tmp}/SnakeYAML.zip" dest="lib/">
			<patternset>
				<include name="**/SnakeYAML*.jar"/>
			</patternset>
			<mapper type="flatten"/>
		</unzip>
	</target>

	<property name="JGraphT.mirror" value="http://downloads.sourceforge.net/project/jgrapht/JGraphT/Version%200.7.3/jgrapht-0.7.3.tar.gz" />
	<property name="JGraphT.md5" value="51586a595af047c43174e520ae45e88b" />
	<property name="JGraphT.sha" value="d4d9b3995bce37616077130d1262c1c6c0be8e0e" />
	<available property="JGraphT.exist" classname="org.jgrapht.Graph" classpathref="lib.path"/>
	<target name="JGraphT-get" unless="JGraphT.exist">
		<get verbose="true" src="${JGraphT.mirror}" dest="${tmp}/jgrapht-0.7.3.tar.gz" />
		<checksum file="${tmp}/jgrapht-0.7.3.tar.gz" algorithm="MD5" property="${JGraphT.md5}" verifyProperty="JGraphTMD5ok" />
		<checksum file="${tmp}/jgrapht-0.7.3.tar.gz" algorithm="SHA" property="${JGraphT.sha}" verifyProperty="JGraphTSHAok" />
		<fail message="jgrapht-0.7.3.tar.gz checksum mismatch">
			<condition>
				<or>
					<equals arg1="${JGraphTMD5ok}" arg2="false" />
					<equals arg1="${JGraphTSHAok}" arg2="false" />
				</or>
			</condition>
		</fail>
		<untar src="${tmp}/jgrapht-0.7.3.tar.gz" compression="gzip" dest="${tmp}/"/>
		<patch patchfile="lib/jgrapht.FibonacciHeap.java.r602.diff" strip="0" dir="${tmp}/jgrapht-0.7.3"/>
		<ant dir="${tmp}/jgrapht-0.7.3" target="jar" />
		<move file="${tmp}/jgrapht-0.7.3/jgrapht-jdk1.5.jar" tofile="lib/jgrapht-jdk1.5-0.7.3+r602.jar" />
	</target>

	<!--<property name="KeyExplorer.mirror" value="http://cloud.github.com/downloads/freenet/plugin-Library-staging/KeyExplorer-dacfafecbc82aecdeffa56bef4a047a7f6c7f08d.jar" />
	<property name="KeyExplorer.md5" value="be5f1ec860fe71c55d029ebe0350f129" />
	<property name="KeyExplorer.sha" value="12bf9bc1b4d436424e43c6b509b87690ac887de1" />
	<available property="KeyExplorer.exist" classname="plugins.KeyExplorer.KeyExplorerUtils" classpathref="lib.path"/>
	<target name="KeyExplorer-get" unless="KeyExplorer.exist">
		<get verbose="true" src="${KeyExplorer.mirror}" dest="${tmp}/KeyExplorer-dacfafecbc82aecdeffa56bef4a047a7f6c7f08d.jar" />
		<checksum file="${tmp}/KeyExplorer-dacfafecbc82aecdeffa56bef4a047a7f6c7f08d.jar" algorithm="MD5" property="${KeyExplorer.md5}" verifyProperty="KeyExplorerMD5ok" />
		<checksum file="${tmp}/KeyExplorer-dacfafecbc82aecdeffa56bef4a047a7f6c7f08d.jar" algorithm="SHA" property="${KeyExplorer.sha}" verifyProperty="KeyExplorerSHAok" />
		<fail message="KeyExplorer.jar checksum mismatch">
			<condition>
				<or>
					<equals arg1="${KeyExplorerMD5ok}" arg2="false" />
					<equals arg1="${KeyExplorerSHAok}" arg2="false" />
				</or>
			</condition>
		</fail>
		<move file="${tmp}/KeyExplorer-dacfafecbc82aecdeffa56bef4a047a7f6c7f08d.jar" todir="lib/" />
	</target>-->

	<!-- ================================================== -->
	<target name="compile" depends="mkdir,build-dep,setver" >
		<tstamp/>
		<javac srcdir="src/" destdir="${build}" classpathref="lib.path"
		debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<include name="**/*.java"/>
			<!--<compilerarg value="-Xlint:unchecked"/>-->
		</javac>
		<!-- Copy web interface static files to the build dir -->
		<copy todir="${build}/plugins/Library/ui/staticfiles">
			<fileset dir="src/plugins/Library/ui/staticfiles"/>
		</copy>
	</target>

	<target name="run" depends="dist">
		<java classname="${packagebase}.ui.TestInterface">
			<classpath>
				<pathelement location="../fred/lib/freenet-cvs-snapshot.jar"/>
				<pathelement location="../fred/lib/freenet-ext.jar"/>
				<pathelement location="dist/Library.jar"/>
			</classpath>
		</java>
	</target>

	<!-- ================================================== -->
	<target name="unit-build" depends="compile" if="junit.present" unless="skip_tests">
		<javac srcdir="test/" destdir="${build-test}" debug="on" optimize="on" source="1.5">
			<classpath>
				<path refid="lib.path"/>
				<pathelement path="${build}"/>
				<pathelement location="${junit.location}"/>
			</classpath>
			<compilerarg value="-Xlint"/>
			<include name="**/*.java"/>
		</javac>
	</target>

	<target name="junit" depends="unit-build" if="junit.present" unless="skip_tests">
		<delete dir="${run-test}"/>
		<mkdir dir="${run-test}"/>
		<junit printsummary="yes" fork="yes" haltonfailure="yes" dir="${run-test}" showoutput="yes">
			<classpath>
				<path refid="lib.path"/>
				<pathelement path="${build}"/>
				<pathelement path="${build-test}"/>
				<pathelement location="${junit.location}"/>
			</classpath>
			<assertions><enable/></assertions>
			<formatter type="plain" usefile="false"/>
			<batchtest fork="yes">
				<fileset dir="${build-test}">
					<include name="**/*Test.class"/>
				</fileset>
			</batchtest>
			<sysproperty key="benchmark" value="${benchmark}" />
			<sysproperty key="extensiveTesting" value="${extensiveTesting}" />
		</junit>
	</target>

	<!-- ================================================== -->
	<target name="jar" depends="compile,junit" description="create a jar package">
		<jar jarfile="${dist}/Library.jar" duplicate="fail">
			<manifest>
				<attribute name="Main-Class" value="${packagebase}.ui.TestInterface"/>
				<attribute name="Plugin-Main-Class" value="${packagebase}.Main"/>
			</manifest>
			<fileset dir="src/" casesensitive="no">
				<include name="**/*.txt"/>
				<include name="**/*.properties"/>
			</fileset>
			<fileset dir="${build}/"/>
			<zipgroupfileset dir="lib/" includes="**/*.jar"/>
		</jar>
	</target>

	<!-- ================================================== -->
	<target name="javadoc" description="generate javadocs">
		<javadoc classpathref="lib.path" destdir="${javadoc}" author="true" version="true" use="true" private="true">
			<doclet name="info.bliki.doclet.standard.Standard" path="doc/bliki-doclet.jar"/>
			<!--<doclet name="com.visural.doclets.markdown.standard.Standard" path="doc/MarkdownDoclet.jar"/>-->
			<fileset dir="src/" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
			<link href="http://snakeyamlrepo.appspot.com/releases/1.3/site/apidocs"/>
			<link href="http://www.jgrapht.org/javadoc"/>
		</javadoc>
	</target>

	<!-- ================================================== -->
	<target name="dist" depends="clean,jar" description="generate the distribution from scratch">
	</target>

	<!-- ================================================== -->
	<target name="clean" description="Delete class files and docs dir.">
		<delete dir="${build}"/>
		<delete dir="${build-test}"/>
		<delete dir="${run-test}"/>
		<delete dir="${dist}"/>
		<delete dir="${javadoc}"/>
	</target>

</project>
